class Main {

    static void main(int[] a)
        requires(a != null)
    {
      // setting param N to:
      int N := 5 ;
      assume #a>=0 && #a>=N ;
      int k := 0 ;
      // inv of outer loop
      // BUT oox does not support loop-inv, so we just require it as assert.
      // oox does not do inv-rule reduction :(
      assert 0<=k && k<=#a;
      assert forall a, i0, x0 : i0<k ==> (forall a, j0, y0 : i0<=j0 ==> x0<=y0) ;
      while (k<#a) {
          int m := #a-1 ;
          int am := a[m] ;
          // inv of inner loop
          assert 0<=k && k<=#a
                 && (forall a, i1, x1 : i1<k ==> (forall a, j1, y1 : i1<=j1 ==> x1<=y1))
                 && k<=m && m<#a
                 && (forall z, j : a : m<=j  ==> am<=z) ;
          while (k<m) {
                am := a[m] ;
                int prev := a[m-1] ;
                if (am<prev) {
                      int tmp := am ;
                      a[m] := prev  ;
                      a[m-1] := tmp ;
                   }
                m := m-1 ;
          }
          k := k+1 ;
      } ;
      assert (forall a, i2, x2 : (forall a, j2, y2 : i2<=j2 ==> x2<=y2)) ;
    }
}