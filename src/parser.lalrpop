use std::str::FromStr;
use crate::ast::*;
grammar;

// parses comma seperated list to a vector
Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Program : Program = <Class*> => Program(<>); 

Class : Class = "class" <Identifier> "{" <Member*> "}";

Member : Member = {
    Constructor => Member::Constructor(<>),
    Method => Member::Method(<>),
    Field => Member::Field(<>)
}

Constructor : Constructor = <Identifier> "(" <Comma<Parameter>> ")" <Specification*> <Body>;

Method : Method = {
    "static" <Type> <Identifier> "(" <Comma<Parameter>> ")" <Specification*> <Body> => Method::Static((<>)),
    <Type> <Identifier> "(" <Comma<Parameter>> ")" <Specification*> <Body>  => Method::Nonstatic((<>)),
}

Parameter : Parameter = <Nonvoidtype> <Identifier>;

Specification : Specification = {
    "requires" "(" <VerificationExpression> ")" => Specification::Requires(<>),
    "ensures" "(" <VerificationExpression> ")" => Specification::Ensures(<>)
}

//TODO: how can i adhere to original grammar here?
// removing field gens conflict between field & method when evaluating class members
Field : Field = "-" <Nonvoidtype> <Identifier> ";";

Body : Statements = "{" <Statement+> "}";

Type : Type = {
    "void" => Type::Void,
    Nonvoidtype
}

Nonvoidtype : Type = {
    Primitivetype,
    Referencetype
}

Primitivetype : Type = {
    "int" => Type::Int,
    "bool" => Type::Bool 
}

Referencetype : Type = {
    ClassType,
    ArrayType
}

ClassType : Type = {
    <Identifier> => Type::Class(<>),
}

ArrayType : Type = {
    <Nonvoidtype> "[]" => Type::Array(Box::new(<>))
}


pub Statements  = Statement*;

pub Statement : Statement = {
        DeclareAssign => Statement::DeclareAssign(<>),
        Declaration => Statement::Declaration(<>),
        Assignment => Statement::Assignment(<>),
        <Invocation> ";" => Statement::Call(<>),
        Skip => Statement::Skip(<>),
        Ite => Statement::Ite(<>),
        "return" <OOXExpression> ";" => Statement::Return(<>),
        "return" ";" => Statement::ReturnVoid,
        Block => Statement::Block(<>),
        Assert => Statement::Assert(<>),
        Assume => Statement::Assume(<>),
        While => Statement::While(<>)
}

DeclareAssign : DeclareAssign = {
    <t:Nonvoidtype> <id:Identifier> ":=" <r:Rhs> ";" => (<>)
}

Declaration : Declaration = {
    <l:Nonvoidtype> <r:Identifier> ";" => (<>)
}

Assignment : Assignment = {
    <l:Lhs> ":=" <r:Rhs> ";" => (<>) 
}

Lhs : Lhs = {
    Identifier => Lhs::Identifier(<>),
    <Identifier> "." <Identifier> => Lhs::AccessField(<>),
    <Identifier> "[" <OOXExpression> "]" => Lhs::AccessArray(<>)
}

Rhs : Rhs= {
    OOXExpression => Rhs::OOXExpression(<>),
    <Identifier> "." <Identifier> => Rhs::AccessField(<>),
    <Identifier> "[" <OOXExpression> "]" => Rhs::AccessArray(<>),
    Invocation => Rhs::Invocation(<>),
    "new" <Identifier> "(" <Arguments> ")" => Rhs::Newobject(<>),
    "new" <ClassType> "[" <OOXExpression> "]" => Rhs::NewArray(<>),
    "new" <Primitivetype> "[" <OOXExpression> "]" => Rhs::NewArray(<>)
}

Invocation : Invocation = {
    <Identifier> "." <Identifier> "(" <Arguments> ")" => (<>)
}

Arguments : Arguments = <Comma<OOXExpression>>;

Skip : Skip = ";" => Skip;

Ite : Ite = {
    "if" "(" <e:OOXExpression> ")" <s1:Statement> "else" <s2:Statement> => (e, Box::new(s1), Box::new(s2)),
    "if" "(" <e:OOXExpression> ")" <s1:Statement> ";" => (e, Box::new(s1), Box::new(Statement::Skip(Skip)))
}

Block : Box<Statements> = {
    "{" <s:Statements> "}" => Box::new(<>)
}

Assert : OOXExpression = {
    "assert" <s:VerificationExpression> ";" => <>
}

Assume : OOXExpression = "assume" <VerificationExpression> ";";

While : While = "while" "(" <v:OOXExpression> ")" <s : Statement>  => (v, Box::new(s));

OOXExpression : OOXExpression = {
    OOXExpression2
}

pub VerificationExpression : OOXExpression = OOXExpression1;

OOXExpression1 : OOXExpression = {
    "forall" <arr:Identifier> "," <i:Identifier> "," <v:Identifier> ":" <expr:OOXExpression1> => OOXExpression::Forall(arr, i, v, Box::new(expr)),
    "exists" <arr:Identifier> "," <i:Identifier> "," <v:Identifier> ":" <expr:OOXExpression1> => OOXExpression::Exists(arr, i, v, Box::new(expr)),
    OOXExpression2
}

OOXExpression2 : OOXExpression = {
    <l:OOXExpression3> "==>" <r:OOXExpression2> => OOXExpression::Implies(Box::new(l), Box::new(r)),
    OOXExpression3
}

OOXExpression3 : OOXExpression = {
    <l:OOXExpression4> "&&" <r:OOXExpression3> => OOXExpression::And(Box::new(l), Box::new(r)),
    <l:OOXExpression4> "||" <r:OOXExpression3> => OOXExpression::Or(Box::new(l), Box::new(r)),
    OOXExpression4
}

OOXExpression4 : OOXExpression = {
    <l:OOXExpression5> "==" <r:OOXExpression4> => OOXExpression::EQ(Box::new(l), Box::new(r)),
    <l:OOXExpression5> "!=" <r:OOXExpression4> => OOXExpression::NE(Box::new(l), Box::new(r)),
    OOXExpression5
}

OOXExpression5 : OOXExpression = {
    <l:OOXExpression6> "<" <r:OOXExpression5> => OOXExpression::LT(Box::new(l), Box::new(r)),
    <l:OOXExpression6> ">" <r:OOXExpression5> => OOXExpression::GT(Box::new(l), Box::new(r)),
    <l:OOXExpression6> "<=" <r:OOXExpression5> => OOXExpression::LEQ(Box::new(l), Box::new(r)),
    <l:OOXExpression6> ">=" <r:OOXExpression5> => OOXExpression::GEQ(Box::new(l), Box::new(r)),
    OOXExpression6
}

OOXExpression6 : OOXExpression = {
    <l:OOXExpression7> "+" <r:OOXExpression6> => OOXExpression::Plus(Box::new(l), Box::new(r)),
    <l:OOXExpression7> "-" <r:OOXExpression6> => OOXExpression::Minus(Box::new(l), Box::new(r)),
    OOXExpression7
}

OOXExpression7 : OOXExpression = {
    <l:OOXExpression8> "*" <r:OOXExpression7> => OOXExpression::Multiply(Box::new(l), Box::new(r)),
    <l:OOXExpression8> "/" <r:OOXExpression7> => OOXExpression::Divide(Box::new(l), Box::new(r)),
    <l:OOXExpression8> "%" <r:OOXExpression7> => OOXExpression::Mod(Box::new(l), Box::new(r)),
    OOXExpression8
}

OOXExpression8 : OOXExpression = {
    "-" <e:OOXExpression8> => OOXExpression::Negative(Box::new(<>)),
    "!" <e:OOXExpression8> => OOXExpression::Not(Box::new(<>)),
    OOXExpression9
}

OOXExpression9 : OOXExpression = {
    Identifier => OOXExpression::Identifier(<>),
    "#" <Identifier>     => OOXExpression::SizeOf(<>),
    Literal => OOXExpression::Literal(<>),
    "(" <e:OOXExpression> ")" => e
}


Literal : Literal = {
    Bool => Literal::Boolean(<>),
    Integer => Literal::Integer(<>),
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

Integer: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z_]+[a-zA-Z0-9_]*" => String::from_str(<>).unwrap()
}

match {
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { },
    _ // Skip `// comments`
}