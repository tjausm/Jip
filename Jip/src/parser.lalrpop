use std::str::FromStr;
use crate::ast::*;

grammar;

pub Statements : Statements = {
    <s:Statement> <ss:Statements> => Statements::Cons(s, Box::new(ss)),
    () => Statements::Nil
}

pub Statement : Statement = {
    Declaration => Statement::Declaration(<>),
    Assignment => Statement::Assignment(<>),
    Ite => Statement::Ite(<>),
    Block => Statement::Block(<>),
    Assert => Statement::Assert(<>),
    Assume => Statement::Assume(<>),
}

Declaration : Declaration = {
    <l:Nonvoidtype> <r:Identifier> ";" => (<>)
}

Nonvoidtype : Nonvoidtype = {
    Primitivetype => Nonvoidtype::Primitivetype(<>)
}

Primitivetype : Primitivetype = {
    "int" => Primitivetype::Int,
    "bool" => Primitivetype::Bool 
}


Assignment : Assignment = {
    <l:Lhs> ":=" <r:Rhs> ";" => (<>) 
}

Lhs : Lhs = {
    Identifier => Lhs::Identifier(<>)
}

Rhs : Rhs= {
    Expression3 => Rhs::Expr(<>)
}

Ite : Ite = {
    "if" "(" <e:Expression3> ")" <s1:Statement> "else" <s2:Statement> => (e, Box::new(s1), Box::new(s2))
}

Block : Box<Statements> = {
    "{" <s:Statements> "}" => Box::new(<>)
}

Assert : Expression = {
    "assert" <s:Verificationexpression> ";" => (<>)
}

Assume : Expression = {
    "assume" <s:Verificationexpression> ";" => (<>)
}

Verificationexpression : Expression = {
    Expression3
}

pub Expression3 : Expression = {
    <l:Expression4> "&&" <r:Expression3> => Expression::And(Box::new(l), Box::new(r)),
    <l:Expression4> "||" <r:Expression3> => Expression::Or(Box::new(l), Box::new(r)),
    Expression4
}

Expression4 : Expression = {
    Expression5
}

Expression5 : Expression = {
    <l:Expression6> "<" <r:Expression5> => Expression::LT(Box::new(l), Box::new(r)),
    <l:Expression6> ">" <r:Expression5> => Expression::GT(Box::new(l), Box::new(r)),
    <l:Expression6> "<=" <r:Expression5> => Expression::LEQ(Box::new(l), Box::new(r)),
    <l:Expression6> ">=" <r:Expression5> => Expression::GEQ(Box::new(l), Box::new(r)),
    Expression6
}

Expression6 : Expression = {
    Expression8
}

Expression8 : Expression = {
    "-" <e:Expression8> => Expression::Minus(Box::new(<>)),
    "!" <e:Expression8> => Expression::Not(Box::new(<>)),
    Expression9
}

Expression9 : Expression = {
    Identifier => Expression::Identifier(<>),
    Literal => Expression::Literal(<>)
}


Literal : Literal = {
    Bool => Literal::Boolean(<>),
    Integer => Literal::Integer(<>),
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

Integer: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};


Identifier: String = {
    r#"[a-zA-Z]+"# => String::from_str(<>).unwrap()
}