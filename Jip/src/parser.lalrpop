use std::str::FromStr;
use crate::ast::*;

grammar;

pub Statements : Statements = {
    <s:Statement> <ss:Statements> => Statements::Cons(s, Box::new(ss)),
    () => Statements::Nil
}

pub Statement : Statement = {
    Declaration => Statement::Declaration(<>),
    Assignment => Statement::Assignment(<>),
    Ite => Statement::Ite(<>),
}


Declaration : Declaration = {
    <l:Nonvoidtype> <r:Identifier> ";" => (<>)
}

Nonvoidtype : Nonvoidtype = {
    Primitivetype => Nonvoidtype::Primitivetype(<>)
}

Primitivetype : Primitivetype = {
    "int" => Primitivetype::Int,
    "bool" => Primitivetype::Bool 
}


Assignment : Assignment = {
    <l:Lhs> ":=" <r:Rhs> ";" => (<>) 
}

Lhs : Lhs = {
    Identifier => Lhs::Identifier(<>)
}

Rhs : Rhs= {
    Expr9 => Rhs::Expr(<>)
}



Ite : Ite = {
    "if" "(" <e:Expr9> ")" <s1:Statement> "else" <s2:Statement> => (e, Box::new(s1), Box::new(s2))
}


Expr9 : Expr9 = {
    Identifier => Expr9::Identifier(<>),
    Literal => Expr9::Literal(<>)
}


Literal : Literal = {
    Bool => Literal::Boolean(<>),
    Integer => Literal::Integer(<>),
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

Integer: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};


Identifier: String = {
    r#"[a-zA-Z]+"# => String::from_str(<>).unwrap()
}